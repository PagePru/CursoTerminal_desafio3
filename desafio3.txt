import {
	mockDataForRicky,
	mockForJSON,
	mockForPutRequest,
} from './mocksForBackend'

Feature('Pruebas de backend APIs REST y GRAPHQL con assertions')

Scenario('Test of backend REST GET', async ({ I }) => {
	const response = await I.sendGetRequest(
		'https://rickandmortyapi.com/api/character/'
	)

	// Validamos el codigo de respuesta correcto
	I.assertEqual(response?.status, 200)

	// Validacion sobre la data por individual
	I.assertEqual(response?.data?.results?.[0]?.status, 'Alive')
	I.assertEqual(response?.data?.results?.[0]?.species, 'Human')

	// Validacion negativa sobre la data por individual
	I.assertNotEqual(response?.data?.results?.[0]?.name, 'Rick Sanez')
	I.assertNotEqual(response?.data?.results?.[0]?.status, 'Detached')
	I.assertNotEqual(response?.data?.results?.[0]?.species, 'Alien')

	// Validacion sobre la data por grupo(objeto)
	I.assertDeepEqual(response?.data?.results?.[0], mockDataForRicky)

	// Validacion negativa sobre la data por grupo(objeto)
	I.assertNotDeepEqual(response?.data?.results?.[1], mockDataForRicky)

	// Validacion de solo una parte si contiene esa cadena
	I.assertContain(response?.data?.results?.[0]?.name, 'Rick')

	// Validacion negativa de solo una parte si contiene esa cadena
	I.assertNotContain(response?.data?.results?.[0]?.name, 'Javier')

	// Validar todo el JSON
	I.assertJsonSchema(response?.data, mockForJSON)

	// Validar tipo de Dato
	I.assertToBeA(response?.data?.results?.[0]?.name, 'string')
	I.assertToBeA(response?.data?.results?.[0]?.id, 'number')
})

// Scenario('Test of backend REST PUT', async ({ I }) => {
// 	const response = await I.sendPutRequest('https://reqres.in/api/users/2', {
// 		name: 'javier',
// 		job: 'zion resident',
// 	})
Tue Apr 19 16:54:04     2022
